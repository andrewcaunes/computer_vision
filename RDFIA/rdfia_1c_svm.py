# -*- coding: utf-8 -*-
"""RDFIA_1c_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ydDNPYHVz2Vt_nLCngr0QxFhIZRnayOe

<center><h1>1-c: SVM</h1></center>

<center><h2><a href="https://rdfia.github.io/">Course link</a></h2></center>

To keep your modifications in case you want to come back later to this colab, do *File -> Save a copy in Drive*.
"""

!wget http://webia.lip6.fr/~douillard/rdfia/15_scenes_Xy.npz

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

import matplotlib.pyplot as plt
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import KFold, train_test_split

"""Loading BoW of the whole dataset (4485 images, thus 4485 dictionnary of 1001 words):"""

data = np.load("15_scenes_Xy.npz")
X = data["X"]
y = data["y"]

X.shape, y.shape

"""Let's see what is the class distribution:"""

{c: nb for c, nb in enumerate(np.bincount(y))}

"""Split the dataset into a train & test set:"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
print(X_train.shape)
print(y_train.shape)

"""Then a validation set from the train set:"""

X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1)

"""Let's hyperparameter gridsearch over different values of `C`:"""

C_values = [1]
accuracies = []

for c in C_values:
  print(f'Training SVM with C={c}')
  svm = SVC(C=c, kernel='linear', gamma='scale', coef0=0.0, random_state=1)

  # Fit on sub-train set
  svm.fit(X_train, y_train)

  # Evaluate on val set
  acc = 1/len(y_val)*np.sum(svm.predict(X_val) == y_val)
  accuracies.append(acc)
  print(f'--> accuracy = {acc}')

#TODO plot the relation between `c` and the accuracy

#TODO Fit on the whole train set, evaluate on the test set

"""Do the same with different kernel values, and different decision functions:"""

# TODO